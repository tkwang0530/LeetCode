"""
1332. Remove Palindromic Subsequence
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Example1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Constraints:
1 <= s.length <= 1000
s[i] is either 'a' or 'b'.
"""

"""
Note:
1. Two Pointers: O(n) time | O(1) space - where n is the length of string s
if it's empty string, return 0
if it's palindrome, return 1
Otherwise, we need at least 2 operation.
(we can delete all characters 'a' in the 1st operation, and then all characters 'b' in the 2nd operation)
"""

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        def isPalindrome(s) -> bool:
            left, right = 0, len(s) - 1
            while left < right:
                if s[left] != s[right]:
                    return False
                left += 1
                right -= 1
            return True

        return 0 if s == "" else (1 if isPalindrome(s) else 2)

# Unit Tests
import unittest
funcs = [Solution().removePalindromeSub]
class TestRemovePalindromeSub(unittest.TestCase):
    def testRemovePalindromeSub1(self):
        for func in funcs:
            s = "ababa"
            self.assertEqual(func(s=s), 1)

    def testRemovePalindromeSub2(self):
        for func in funcs:
            s = "abb"
            self.assertEqual(func(s=s), 2)

    def testRemovePalindromeSub3(self):
        for func in funcs:
            s = "baabb"
            self.assertEqual(func(s=s), 2)

if __name__ == "__main__":
    unittest.main()
